<?php

declare(strict_types=1);

namespace Doctrine\Tests\ORM\Functional\Ticket\GH9467;

use Doctrine\Tests\OrmFunctionalTestCase;

class GH9467Test extends OrmFunctionalTestCase
{
    protected function setUp(): void
    {
        parent::setUp();

        $this->createSchemaForModels(
            JoinedInheritanceRoot::class,
            JoinedInheritanceWritableColumn::class,
            JoinedInheritanceNonWritableColumn::class,
            JoinedInheritanceNonInsertableColumn::class,
            JoinedInheritanceNonUpdatableColumn::class,
        );
    }

    public function testJoinedInheritanceWritableColumn(): void
    {
        $entity                  = new JoinedInheritanceWritableColumn();
        $entity->writableContent = 'foo';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check no any changes for writable value
        self::assertEquals('foo', $entity->writableContent);

        // check insert
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceWritableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceWritableColumn::class, $cleanEntity);
        self::assertEquals('foo', $cleanEntity->writableContent);

        // update
        $entity->writableContent = 'bar';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check no any changes for writable value
        self::assertEquals('bar', $entity->writableContent);

        // check update
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceWritableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceWritableColumn::class, $cleanEntity);
        self::assertEquals('bar', $cleanEntity->writableContent);
    }

    public function testJoinedInheritanceNonWritableColumn(): void
    {
        $entity                     = new JoinedInheritanceNonWritableColumn();
        $entity->nonWritableContent = 'foo';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check fetch generated by db value
        self::assertEquals('dbDefault', $entity->nonWritableContent);

        // update
        $entity->rootField          = 'bar'; // to have changeset
        $entity->nonWritableContent = 'bar';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check refetch update non updatable values
        self::assertEquals('dbDefault', $entity->nonWritableContent);

        // check update
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceNonWritableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceNonWritableColumn::class, $cleanEntity);
        self::assertEquals('dbDefault', $cleanEntity->nonWritableContent);
    }

    public function testJoinedInheritanceNonInsertableColumn(): void
    {
        $entity                       = new JoinedInheritanceNonInsertableColumn();
        $entity->nonInsertableContent = 'foo';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check fetch generated by db value
        self::assertEquals('dbDefault', $entity->nonInsertableContent);

        // update
        $entity->nonInsertableContent = 'bar';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check no any changes for updatable value
        self::assertEquals('bar', $entity->nonInsertableContent);

        // check update
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceNonInsertableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceNonInsertableColumn::class, $cleanEntity);
        self::assertEquals('bar', $cleanEntity->nonInsertableContent);
    }

    public function testJoinedInheritanceNonUpdatableColumn(): void
    {
        $entity                      = new JoinedInheritanceNonUpdatableColumn();
        $entity->nonUpdatableContent = 'foo';

        $this->_em->persist($entity);
        $this->_em->flush();

        // check refetch not override insertable value
        self::assertEquals('foo', $entity->nonUpdatableContent);

        // check insert
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceNonUpdatableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceNonUpdatableColumn::class, $cleanEntity);
        self::assertEquals('foo', $cleanEntity->nonUpdatableContent);

        // update
        $cleanEntity->rootField           = 'bar'; // to have changeset
        $cleanEntity->nonUpdatableContent = 'bar';

        $this->_em->persist($cleanEntity);
        $this->_em->flush();

        // check refetch update non updatable values
        self::assertEquals('foo', $cleanEntity->nonUpdatableContent);

        // check update
        $this->_em->clear();
        $cleanEntity = $this->_em->find(JoinedInheritanceNonUpdatableColumn::class, $entity->id);
        self::assertInstanceOf(JoinedInheritanceNonUpdatableColumn::class, $cleanEntity);
        self::assertEquals('foo', $cleanEntity->nonUpdatableContent);
    }
}
